# Configuration for Play's AkkaHttpServer
play {

  http {
    secret.key = "not-production-ready"
    secret.key = ${?APPLICATION_SECRET}
  }

  server {
    # The server provider class name
    provider = "play.core.server.AkkaHttpServerProvider"

    http {
      # The HTTP port of the server. Use a value of "disabled" if the server
      # shouldn't bind an HTTP port.
      port = 9000

      # The interface address to bind to.
      address = "0.0.0.0"

      # The idle timeout for an open connection after which it will be closed
      # Set to null or "infinite" to disable the timeout, but notice that this
      # is not encouraged since timeout are important mechanisms to protect your
      # servers from malicious attacks or programming mistakes.
      idleTimeout = "infinite"
    }

    akka {

      http {
        ## Secret key
        # http://www.playframework.com/documentation/latest/ApplicationSecret
        # ~~~~~
        # The secret key is used to sign Play's session cookie.
        # This must be changed for production, but we don't recommend you change it in this file.

        address = ${play.server.http.address}
        port    = ${play.server.http.port}
      }

      # How long to wait when binding to the listening socket
      bindTimeout = 5 seconds

      # How long a request takes until it times out. Set to null or "infinite" to disable the timeout.
      requestTimeout = "infinite"
      # Enables/disables automatic handling of HEAD requests.
      # If this setting is enabled the server dispatches HEAD requests as GET
      # requests to the application and automatically strips off all message
      # bodies from outgoing responses.
      # Note that, even when this setting is off the server will never send
      # out message bodies on responses to HEAD requests.
      transparent-head-requests = off

      # If this setting is empty the server only accepts requests that carry a
      # non-empty `Host` header. Otherwise it responds with `400 Bad Request`.
      # Set to a non-empty value to be used in lieu of a missing or empty `Host`
      # header to make the server accept such requests.
      # Note that the server will never accept HTTP/1.1 request without a `Host`
      # header, i.e. this setting only affects HTTP/1.1 requests with an empty
      # `Host` header as well as HTTP/1.0 requests.
      # Examples: `www.spray.io` or `example.com:8080`
      default-host-header = ""

      # The default value of the `Server` header to produce if no
      # explicit `Server`-header was included in a response.
      # If this value is null and no header was included in
      # the request, no `Server` header will be rendered at all.
      server-header = null
      server-header = ${?play.server.server-header}

      # Configures the processing mode when encountering illegal characters in
      # header value of response.
      #
      # Supported mode:
      # `error`  : default mode, throw an ParsingException and terminate the processing
      # `warn`   : ignore the illegal characters in response header value and log a warning message
      # `ignore` : just ignore the illegal characters in response header value
      illegal-response-header-value-processing-mode = warn

      # This setting is set in `akka.http.server.parsing.max-content-length`
      # Play uses the concept of a `BodyParser` to enforce this limit, so we override it to infinite.
      max-content-length = infinite

      # This setting is set in `akka.http.server.parsing.max-header-value-length`
      # and it limits the length of HTTP header values.
      max-header-value-length = 8k


      # Enables/disables inclusion of an Tls-Session-Info header in parsed
      # messages over Tls transports (i.e., HttpRequest on server side and
      # HttpResponse on client side).
      #
      # See Akka HTTP `akka.http.server.parsing.tls-session-info-header` for
      # more information about how this works.
      tls-session-info-header = on
    }
  }

  ## Internationalisation
  # https://www.playframework.com/documentation/latest/JavaI18N
  # https://www.playframework.com/documentation/latest/ScalaI18N
  # ~~~~~
  # Play comes with its own i18n settings, which allow the user's preferred language
  # to map through to internal messages, or allow the language to be stored in a cookie.
  i18n {
    # The application languages
    langs = [ "en" ]

    # Whether the language cookie should be secure or not
    #langCookieSecure = true

    # Whether the HTTP only attribute of the cookie should be set to true
    #langCookieHttpOnly = true
  }

  modules {
    # By default, Play will load any class called Module that is defined
    # in the root package (the "app" directory), or you can define them
    # explicitly below.
    # If there are any built-in modules that you want to enable, you can list them here.
    #enabled += my.application.Module
    #enabled += "com.github.tototoshi.play2.json4s.native.Json4sModule"
    # If there are any built-in modules that you want to disable, you can list them here.
    #disabled += ""
  }
  
  # Map static resources from the /public folder to the /assets URL path
  assets {
    path = "/public"
    urlPrefix = "/assets"
  }
  filters {
    disabled += "play.filters.csrf.CSRFFilter"
    hosts {
      # Allow requests to example.com, its subdomains, and localhost:9000.
      # FIXME: restrict for production
      allowed = ["."] #, "localhost:9000"]
    }
  }
}

contexts {
  odinson {
    fixed-pool-size = 2
  }
}

